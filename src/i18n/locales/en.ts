import { TranslationKeys } from '../types'

export const en: TranslationKeys = {
  commands: {
    openChat: 'Open chat',
    addSelectionToChat: 'Add selection to chat',
    rebuildVaultIndex: 'Rebuild entire vault index',
    updateVaultIndex: 'Update index for modified files',
  },

  common: {
    save: 'Save',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    remove: 'Remove',
    confirm: 'Confirm',
    close: 'Close',
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
    warning: 'Warning',
    retry: 'Retry',
    copy: 'Copy',
    paste: 'Paste',
  },

  settings: {
    title: 'Smart Composer Settings',
    supportSmartComposer: {
      name: 'Support Smart Composer',
      desc: 'If you find Smart Composer valuable, consider supporting its development!',
      buyMeACoffee: 'Buy Me a Coffee',
    },
    chat: {
      title: 'Chat',
      defaultModel: 'Default Chat Model',
      applyModel: 'Apply Model',
      systemPrompt: 'System Prompt',
      includeCurrentFile: 'Include current file content in context',
      enableTools: 'Enable tools',
      maxAutoIterations: 'Max auto iterations',
    },
    assistants: {
      title: 'Assistants',
      addAssistant: 'Add Assistant',
      editAssistant: 'Edit Assistant',
      deleteAssistant: 'Delete Assistant',
      name: 'Name',
      systemPrompt: 'System Prompt',
      model: 'Model',
    },
    providers: {
      title: 'Providers',
      addProvider: 'Add Provider',
      editProvider: 'Edit Provider',
      deleteProvider: 'Delete Provider',
    },
    models: {
      title: 'Models',
      chatModels: 'Chat Models',
      embeddingModels: 'Embedding Models',
      addChatModel: 'Add Chat Model',
      addEmbeddingModel: 'Add Embedding Model',
    },
    rag: {
      title: 'RAG (Retrieval Augmented Generation)',
      embeddingModel: 'Embedding Model',
      chunkSize: 'Chunk Size',
      thresholdTokens: 'Threshold Tokens',
      minSimilarity: 'Min Similarity',
      limit: 'Limit',
      includePatterns: 'Include Patterns',
      excludePatterns: 'Exclude Patterns',
      rebuildIndex: 'Rebuild Index',
    },
    mcp: {
      title: 'Model Context Protocol (MCP)',
      addServer: 'Add MCP Server',
      serverName: 'Server Name',
      command: 'Command',
    },
    templates: {
      title: 'Templates',
      addTemplate: 'Add Template',
      templateName: 'Template Name',
    },
    language: {
      title: 'Language',
      select: 'Select Language',
    },
  },

  chat: {
    placeholder: 'Ask anything about your vault...',
    sendMessage: 'Send Message',
    newChat: 'New Chat',
    vaultSearch: 'Vault Search',
    selectModel: 'Select Model',
    uploadImage: 'Upload Image',
    addContext: 'Add Context',
    applyChanges: 'Apply Changes',
    copyMessage: 'Copy Message',
    regenerate: 'Regenerate',
    reasoning: 'Reasoning',
    annotations: 'Annotations',
  },

  notices: {
    rebuildingIndex: 'Rebuilding vault index...',
    rebuildComplete: 'Rebuilding vault index complete',
    rebuildFailed: 'Rebuilding vault index failed',
    updatingIndex: 'Updating vault index...',
    indexUpdated: 'Vault index updated',
    indexUpdateFailed: 'Vault index update failed',
    migrationComplete: 'Migration to JSON storage completed successfully',
    migrationFailed: 'Failed to migrate to JSON storage. Please check the console for details.',
    reloadingPlugin: 'Reloading "smart-composer" due to migration',
    settingsInvalid: 'Invalid settings',
  },

  errors: {
    providerNotFound: 'Provider not found',
    modelNotFound: 'Model not found',
    invalidApiKey: 'Invalid API key',
    networkError: 'Network error',
    databaseError: 'Database error',
    mcpServerError: 'MCP server error',
  },
}